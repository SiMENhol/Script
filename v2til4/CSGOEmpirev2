let stepToPerform = 0;           // Initial step
let token = 0;                   // Token for betting logic
let startBet = 0.05;
let lastBet = startBet;           // Keeps track of the last bet amount
let activeBet = false;            // Track if a bet is active
let doubleCount = 0;              // Tracks how many times the bet has been doubled
let lastButtonClicked = null;     // Keeps track of the last button that was clicked
let lastOutcome = null;           // Stores the outcome of the last round
let hasPerformedSteps = false;    // Flag to indicate if steps have been performed

// Main function to control the betting steps
function performBettingSteps() {
    // Get the countdown element
    const spinningWheelCountdown = document.querySelector('.text-2xl.font-bold.font-numeric');
    
    // Check if the countdown element is available and retrieve its value
    if (spinningWheelCountdown) {
        const countdownValue = parseFloat(spinningWheelCountdown.textContent.replace(',', '.'));

        // When countdown goes below 14.00 and steps haven't been performed yet
        if (countdownValue < 14.00 && !hasPerformedSteps) {
            hasPerformedSteps = true; // Set the flag to indicate steps are being performed
            console.log("Step 0 - Entering betting phase");
            
            // Proceed through the steps
            if (stepToPerform === 0) {
                stepToPerform = 1;  // Proceed to check if betting should occur
            }

            if (stepToPerform === 1) {
                console.log("Step 1 - Checking if it should bet");
                const token2 = CheckIfIShouldBet();
                if (token2 > 0) {
                    stepToPerform = 3;
                    token = token2;
                } else {
                    lastBet = startBet;
                    activeBet = false;
                    stepToPerform = 2;
                }
            } else if (stepToPerform === 2) {
                console.log("Step 2 - Waiting for a better opportunity, going back to step 0");
                // Go back to step 0 to wait for the next countdown
                stepToPerform = 0;
            } else if (stepToPerform === 3) {
                console.log("Step 3 - Placing the bet");
                PlaceBet();
                stepToPerform = 4;  // Move to result-checking phase after placing the bet
            } else if (stepToPerform === 4 && countdownValue < 12.00) {
                console.log("Step 4 - Checking last round's result");
                const lastOutcome = CheckLastResult();
                if (lastButtonClicked && lastOutcome === lastButtonClicked) {
                    console.log("Bet won! Resetting bet amount.");
                    ResetBetAfterWin();
                } else {
                    console.log("Bet lost! Doubling the bet amount.");
                    DoubleBetAmount();
                }
                stepToPerform = 0;  // Go back to start, waiting for the next bet opportunity
            }
        } else if (countdownValue >= 14.00) {
            hasPerformedSteps = false; // Reset flag when countdown is above 14.00
        }
    }
    
    // Check countdown and betting steps every second
    setTimeout(performBettingSteps, 1000);
}

// Function to check if the bot should place a bet (returns a token)
function CheckIfIShouldBet() {
    // Add your custom logic for determining whether to place a bet or not
    // Returning a positive value means the bot should bet
    return Math.random() > 0.5 ? 1 : 0;  // Example logic
}

// Function to place a bet
function PlaceBet() {
    // Decide which button to click based on the logic
    let buttonToClick = null;
    if (token === 1) {
        buttonToClick = document.querySelector('[data-testid="bet-button-t"]');
    } else if (token === 2) {
        buttonToClick = document.querySelector('[data-testid="bet-button-ct"]');
    } else if (token === 3) {
        buttonToClick = document.querySelector('[data-testid="bet-button-bonus"]');
    }

    // Click the chosen button and track the last button clicked
    if (buttonToClick && !buttonToClick.classList.contains('bet-btn--disabled')) {
        buttonToClick.click();
        lastButtonClicked = buttonToClick.getAttribute('data-testid');  // Track which button was clicked
        console.log('Bet placed on: ' + lastButtonClicked);
    }
}

// Function to check the outcome of the last round (returns "t", "ct", or "bonus")
function CheckLastResult() {
    // Get the latest result from the outcome elements
    const latestNumber = document.getElementsByClassName('flex relative h-24')[0].children[9].innerHTML;
    if (latestNumber.includes("coin-bonus")) {
        return "bet-button-bonus";
    } else if (latestNumber.includes("coin-t")) {
        return "bet-button-t";
    } else if (latestNumber.includes("coin-ct")) {
        return "bet-button-ct";
    }
    return null;
}

// Function to double the bet amount after a loss
function DoubleBetAmount() {
    const doubleBetButton = document.querySelector('[data-testid="roulette-bet-input-x2"]');
    if (doubleBetButton && !doubleBetButton.classList.contains('bet-btn--disabled')) {
        doubleBetButton.click();
        doubleCount++;
        console.log('Bet doubled');
    }
}

// Function to reset the bet after a win
function ResetBetAfterWin() {
    for (let i = 0; i < doubleCount; i++) {
        const halfBetButton = document.querySelector('[data-testid="roulette-bet-input-1/2"]');
        if (halfBetButton && !halfBetButton.classList.contains('bet-btn--disabled')) {
            halfBetButton.click();
            console.log('Bet halved');
        }
    }
    doubleCount = 0;  // Reset the double count after the bet is reset
    lastBet = startBet;  // Reset the bet amount
}

// Start the betting process
performBettingSteps();
